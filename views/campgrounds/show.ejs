<% layout('layouts/boilerplate')%>

<!--
    importing our css for star ratings,
    NOTE: dont forget the first "/".
    notice how directory reference starts from public folder:
-->
<link rel="stylesheet" href="/stylesheets/stars.css" />

<div class="row">
  <div class="col-6">
    <!-- for multiple images stored in cdn/cloud (with bootstrap carousel) -->
    <div id="campgroundCarousel" class="carousel slide" data-bs-ride="carousel">
      <div class="carousel-inner">
        <!-- displaying multiple images
             (using forEach because we need index for first "active" image)
         -->
        <%campground.images.forEach((img, i) => {%>
        <div class="carousel-item <%= i === 0 ? 'active' : '' %>">
          <img src="<%= img.url%>" class="d-block w-100" alt="" crossorigin />
        </div>
        <%})%>
      </div>

      <!-- display arrow buttons only if more than 1 image-->
      <% if(campground.images.length > 1) { %>

      <button
        class="carousel-control-prev"
        type="button"
        data-bs-target="#campgroundCarousel"
        data-bs-slide="prev"
      >
        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Previous</span>
      </button>
      <button
        class="carousel-control-next"
        type="button"
        data-bs-target="#campgroundCarousel"
        data-bs-slide="next"
      >
        <span class="carousel-control-next-icon" aria-hidden="true"></span>
        <span class="visually-hidden">Next</span>
      </button>

      <% }%>
    </div>

    <div class="card mb-3">
      <!-- for single image from external url: -->
      <!-- <img src="<%= campground.image%>" class="card-img-top" alt="..." /> -->

      <!-- for multiple images stored in cdn/cloud (basic without carousel) -->
      <!-- <%for(let img of campground.images) {%>
      <img src="<%= img.url%>" class="card-img-top" alt="..." />
      <%}%> -->

      <div class="card-body">
        <h5 class="card-title"><%= campground.title%></h5>
        <p class="card-text"><%= campground.description%></p>
      </div>
      <ul class="list-group list-group-flush">
        <li class="list-group-item text-muted"><%= campground.location%></li>
        <li class="list-group-item">
          Submitted by <%= campground.author.username%>
        </li>
        <li class="list-group-item">$ <%= campground.price%>/night</li>
      </ul>

      <!-- show edit and delete buttons only if correct user (author) is signed in: -->
      <% if(currentUser && campground.author.equals(currentUser._id)) {%>
      <div class="card-body">
        <a
          class="card-link btn btn-info"
          href="/campgrounds/<%=campground._id%>/edit"
          >Edit</a
        >
        <!-- delete button with method override: -->
        <form
          class="d-inline"
          action="/campgrounds/<%=campground._id%>?_method=DELETE"
          method="POST"
        >
          <button class="btn btn-danger">Delete</button>
        </form>
      </div>
      <% } %>

      <div class="card-footer text-muted">2 days ago</div>
    </div>
  </div>

  <div class="col-6">
    <div id="map" style="min-width: 100px; height: 300px"></div>

    <!-- If user is logged in let them review: -->
    <% if(currentUser) {%>

    <h2>Leave a review</h2>
    <!-- dont forget that we are already passing campground details to this ejs through render function! -->
    <!-- and the route path needs campground id! -->
    <form
      action="/campgrounds/<%=campground._id%>/reviews"
      method="POST"
      class="mb-3 client-side-form-validation"
      novalidate
    >
      <!--
        using starability.css for ratings form.
        notice how we are setting rating in the form by using "review[rating]"
       -->

      <div class="mb-3">
        <fieldset class="starability-growRotate">
          <input
            type="radio"
            id="no-rate"
            class="input-no-rate"
            name="review[rating]"
            value="1"
            checked
            aria-label="No rating."
          />
          <input
            type="radio"
            id="first-rate1"
            name="review[rating]"
            value="1"
          />
          <label for="first-rate1" title="Terrible">1 star</label>
          <input
            type="radio"
            id="first-rate2"
            name="review[rating]"
            value="2"
          />
          <label for="first-rate2" title="Not good">2 stars</label>
          <input
            type="radio"
            id="first-rate3"
            name="review[rating]"
            value="3"
          />
          <label for="first-rate3" title="Average">3 stars</label>
          <input
            type="radio"
            id="first-rate4"
            name="review[rating]"
            value="4"
          />
          <label for="first-rate4" title="Very good">4 stars</label>
          <input
            type="radio"
            id="first-rate5"
            name="review[rating]"
            value="5"
          />
          <label for="first-rate5" title="Amazing">5 stars</label>
        </fieldset>
      </div>

      <div class="mb-3">
        <label class="form-label" for="reviewtextarea">Review Text: </label>
        <textarea
          class="form-control"
          id="reviewtextarea"
          cols="30"
          rows="3"
          name="review[body]"
          required
        ></textarea>
        <div class="valid-feedback">Looks good!</div>
      </div>

      <button class="btn btn-success">Submit</button>
    </form>

    <% } %>

    <!-- iterating through all reviews stored in this campground: -->
    <% for(let review of campground.reviews) { %>
    <div class="card my-3">
      <div class="card-body">
        <h5 class="card-title"><%= review.author.username %></h5>
        <!--
           Using starability.css,
           data-rating attribute specifies how many stars to display.
           The text inside "p" tag is only for accessability purpose:
         -->
        <p class="starability-result" data-rating="<%= review.rating%>">
          Rated: <%= review.rating%> stars
        </p>
        <p class="card-text"><%= review.body%></p>

        <!-- dont show the delete button if user is not authorized -->
        <% if(currentUser && review.author.equals(currentUser._id)) {%>
        <form
          class="mb-3"
          action="/campgrounds/<%=campground._id%>/reviews/<%=review._id%>?_method=DELETE"
          method="POST"
        >
          <button class="btn btn-sm btn-danger">Delete</button>
        </form>
        <%}%>
      </div>
    </div>
    <% } %>
  </div>
</div>

<!-- get mapbox access token from .env file.
  and also the stringified campground obj (since _id is not a string) which has the coordinates of location,
  You can check in devtools sources tab,
  This is an example of handing data off from the server side to the client side,
  mapToken and campground will now get passed to showPageMap.js script:
-->
<script>
  const mapToken = "<%- process.env.MAPBOX_TOKEN %>";

  // warning: we cant pass JSON.stringify(campground) using double quotes like above,
  // It gives an error in browser that coordinates are undefined,
  // we how to pass it without double quotes, which gives error in vscode but works in browser:

  const campground = <%- JSON.stringify(campground) %>;
</script>

<!-- authenticate access token for mapbox-gl using this script: -->
<script src="/javascripts/showPageMap.js"></script>
